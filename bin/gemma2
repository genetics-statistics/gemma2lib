#!/usr/bin/env python3
#
# This is the main gemma2 starting point. It is parses command line
# arguments and hands them off to other modules.

import click # command line parsing
import pprint
import sys

from click import echo
from itertools import chain
from os.path import dirname
from toolz.functoolz import pipe
from subprocess import run,CompletedProcess
import logging

BASEDIR=str.strip(pipe(__file__,dirname,dirname)) or "."
VERSION=open(BASEDIR+"/VERSION").read()

print("GEMMA2",VERSION.strip(),"Genome-wide efficient 'exact' mixed-model analysis by Pjotr Prins, Xiang Zhou and others")

sys.path.append(BASEDIR)
import gemma2 # you may need to add source to PYTHONPATH
from gemma2.format.plink import convert_plink

options = {}
second = ["gwa"]

# pp = pprint.PrettyPrinter(indent=4)
# print(sys.argv)

split_on = ["%", "'=>'"]

def gemma1_pass(bin,args):
    """At this stage a simple pass-through"""
    args1 = list(args)
    # locate gemma
    args1.insert(0,bin)
    cmd = " ".join(args1)
    logging.warning("Gemma1 -- should read the docs -- compatibility mode calling:\n"+cmd)
    # print(args1)
    run(args1)

# Grouping multi commands, see https://click.palletsprojects.com/en/7.x/commands/
# @click.group(invoke_without_command=True)
@click.group()
@click.option('--validate/--no-validate', default=False, show_default=True,
              help="Validate input and output")
@click.option('--debug/--no-debug', default=False, show_default=True,
              help="Debug on/off")
@click.option('-v','--verbose', type=int, default=1, show_default=True, count=True,
              help="Verbosity levels 0-9")
@click.option('--log',type=click.Choice(['DEBUG', 'INFO', 'WARNING', 'ERROR'],
                                        case_sensitive=False),
                                        default = 'WARNING',
                                        show_default=True,
)
# @click.argument('args', nargs=-1, type=click.UNPROCESSED)
@click.pass_context
def gemma2(ctx,debug,verbose,validate,log):
    # if not ctx.invoked_subcommand:
    #   echo("Passing on to gemma1!!")
    #   gemma1_pass(list(args))
    ctx.ensure_object(dict)

    options['debug'] = debug
    ctx.obj['DEBUG'] = debug

    options['verbose'] = verbose
    ctx.obj['VERBOSE'] = verbose

    options['validate'] = validate
    ctx.obj['DEBUG'] = validate

    if not log:
        log = 'WARNING'
    options['log'] = log
    ctx.obj['LOG'] = log
    if log:
        logger = { 'DEBUG': logging.DEBUG,
                   'INFO': logging.INFO,
                   'WARNING': logging.WARNING,
                   'ERROR': logging.ERROR
        }
        logging.basicConfig(level=logger[log])

    if verbose:
        echo(options)

# The gemma1 command does a simple pass through without command line
# checking! This is for quick testing only as it finds the gemma
# binary
@gemma2.command(context_settings=dict(ignore_unknown_options=True),
                help="Raw GEMMAv1 pass through mode")
# @click.argument('bin', envvar='GEMMA1_BIN', type=click.File('r'), default="gemma")
@click.option('--bin', type=str, default="gemma", envvar='GEMMA1_BIN', show_default=True, help="Path or binary name pointing to GEMMAv1 (alternatively set GEMMA1_BIN)")
@click.argument('args', nargs=-1, type=click.UNPROCESSED)
def gemma1(bin,args):
    cmdline = list(args)
    gemma1_pass(bin,args)

@gemma2.command(help="Convert from PLINK and BIMBAM to GEMMA2/Rqtl2 format")
# @click.argument
#  -bfile    [prefix]        specify input PLINK binary ped file prefix.
#           requires: *.fam, *.bim and *.bed files
@click.option('--plink', type=str, help="path (prefix to .fam, .bim and .bed)")
def convert(plink):
    convert_plink(plink,options['verbose'],options['debug'])

@gemma2.command(help="Filtering commands")
@click.pass_context
def filter(ctx):
    echo('- Filter data')

@gemma2.command(help="Compute kinship/genetic relationship matrix (GRM)")
@click.pass_context
def grm(ctx):
    echo('- Kinship/Genetic Relationship Matrix (GRM) command')
    echo('2 Debug is %s' % (ctx.obj['DEBUG'] and 'on' or 'off'))
    if second:
        gemma2(second)

@gemma2.command(help="Compute genome-wide association (GWA)")
@click.option('--iterations', default=1_000)
@click.pass_context
def lmm(ctx,iterations):
    echo('** Genome-wide Association (GWA)')
    echo('3 Debug is %s' % (ctx.obj['DEBUG'] and 'on' or 'off'))
    echo("iterations is %s" % (iterations))
    echo("verbose is %s" % (ctx.obj['VERBOSE']))
    echo("log is %s" % (ctx.obj['LOG']))

gemma2.add_command(convert)
gemma2.add_command(gemma1)
gemma2.add_command(filter)
gemma2.add_command(grm)
gemma2.add_command(lmm)

gemma2()
