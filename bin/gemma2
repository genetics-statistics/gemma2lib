#!/usr/bin/env python3
#
# This is the main gemma2 starting point. It is parses command line
# arguments and hands them off to other modules.

import click # command line parsing
import pprint
import sys

from click import echo
from itertools import chain
from os.path import dirname
from toolz.functoolz import pipe
from subprocess import run,CompletedProcess

BASEDIR=str.strip(pipe(__file__,dirname,dirname)) or "."
VERSION=open(BASEDIR+"/VERSION").read()

print("GEMMA2",VERSION.strip(),"Genome-wide efficient 'exact' mixed-model analysis by Pjotr Prins, Xiang Zhou and others")

second = ["gwa"]

# pp = pprint.PrettyPrinter(indent=4)
# print(sys.argv)

split_on = ["%", "'=>'"]

def gemma1_pass(args):
    """At this stage a simple pass-through"""
    args1 = list(args)
    args1.insert(0,"gemma")
    cmd = " ".join(args)
    click.echo("- Gemma1 compatibility mode calling:\ngemma "+cmd)
    print(args1)
    run(args1)

# Grouping multi commands, see https://click.palletsprojects.com/en/7.x/commands/
@click.group(invoke_without_command=True)
@click.option('--debug/--no-debug', default=False)
@click.option('--verbose', type=int, default=1, show_default=True, count=True)
@click.option('--log',type=click.Choice(['DEBUG', 'INFO', 'WARNING', 'ERROR'], case_sensitive=False))
# @click.argument('args', nargs=-1, type=click.UNPROCESSED)
@click.pass_context
def gemma2(ctx,debug,verbose,log):
    echo("HERE")
    if not ctx.invoked_subcommand:
        echo("Passing on to gemma1!!")
        # gemma1_pass(list(args))
    ctx.ensure_object(dict)
    ctx.obj['DEBUG'] = debug
    click.echo('1 Debug is %s' % (ctx.obj['DEBUG'] and 'on' or 'off'))

# The gemma1 command does a simple pass through without command line
# checking! This is for quick testing only as it finds the gemma
# binary
@gemma2.command(context_settings=dict(ignore_unknown_options=True),
                help="Simple raw GEMMAv1 pass through mode")
@click.argument('args', nargs=-1, type=click.UNPROCESSED)
def gemma1(args):
    cmdline = list(args)
    gemma1_pass(args)

@gemma2.command(help="Filtering commands")
@click.pass_context
def filter(ctx):
    click.echo('- Filter data')

@gemma2.command(help="Compute kinship/genetic relationship matrix (GRM)")
@click.pass_context
def grm(ctx):
    click.echo('- Kinship/Genetic Relationship Matrix (GRM) command')
    click.echo('2 Debug is %s' % (ctx.obj['DEBUG'] and 'on' or 'off'))
    if second:
        gemma2(second)

@gemma2.command(help="Compute genome-wide association (GWA)")
@click.option('--port', default=8000)
@click.pass_context
def gwa(ctx,port):
    click.echo('** Genome-wide Association (GWA)')
    click.echo('3 Debug is %s' % (ctx.obj['DEBUG'] and 'on' or 'off'))
    click.echo(port)

gemma2.add_command(gemma1)
gemma2.add_command(filter)
gemma2.add_command(grm)
gemma2.add_command(gwa)

gemma2()
